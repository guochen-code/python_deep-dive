json keys must be strings -> but python dictionary keys just have to be hashable
                          -> how to serialize?
                          
json value types are limited -> but python dictionary values can be any data type
                             -> how to serialize?
                             
even if we can serialize a complex data type, such as custom class
                             -> how to deserialize back to original data type?    
                             
customize serialization and deserialization

*****************************************************
def custom_json_formatter(arg):
  if isinstance(arg,datetime):
    return arg.isoformat()
  elif isinstance(arg,set):
    return list(arg)
  else:
    try:
      return arg.toJson()
    except AttributeError:
      try:
        return vars(arg)
      except TypeError:
        return str(arg)

from decimal import Decimal

pt1 = Point(1,2)
p = Person('John',18)
pt2 = Point(Decimal('10.5'),Decimal(100.5))

log_record = dict(time=datetime.utcnow(),
                  message='Created new point',
                  point = pt1,
                  point_2 = pt2,
                  created_by = p
                  )

json.dumps(long_record, default=custom_json_formatter)
*****************************************************
problem above: new data type need new if statement
solution: singledispatch

from functools import singledispatch
@singledispatch
def json_format(arg):
  try:
    return arg.toJson()
  except AttributeError:
    try:
      return vars(arg)
    except TypeError:
      return str(arg)

@json_format.register(datetime)
def _(arg):
  return arg.isoformat
@json_format.register(set)
def _(arg):
  return list(arg)
  
json.dumps(log_record, indent=2, default=json_format)

from decimal import Decimal
from fractions import Fraction

d = dict(a=1+1j,
          b=Decimal('0.5'),
          c=Fraction(1,3),
          p=Person('python',27)
          time=datetime.utcnow()
          )
          
 @json_format.register(Decimal)
 def _(arg):
  return f'Decimal({str(arg)})'
