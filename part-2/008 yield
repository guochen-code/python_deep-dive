generator functions are functions that contain at least one yield statement
when a generator function is called, python creates a generator object
generators implement the iterator protocol
generators are inherently lazy iterators (and can be infinite)
generators are iterators, and can be used in the same way (for loops, comprehensions, etc)
generators become exhausted once the function returns a value
********************************
def my_func():
  print('line 1')
  yield 'Flying'
  print('line 2')
  yield 'Circus'

f=my_func()                                 # didn't do anything, only assign an object, created this generator object from this code, not run anything inside func
type(f) -> generator                        # will be exhausted
'__iter__' in dir(f) -> True
'__next__' in dir(f) -> True
iter(f) is f -> True
f.__next__() -> line 1 /n Flying
result=next(f) -> line 2
result -> Circus

application - generate generators:
def squares(n):
  for i in range(n):
    yield i**2
sq = squares(5)
list(sq) -> [0,1,4,9,16]


******************************** less code if use yield
yield is generator function
(1) emit
(2) pause
(3) StopIteration

Class FactIter:
  def __init__(self,n):
    self.n=n
    self.i=0
  def __iter__(self):
    return self
  def __next__(self):
    if self.i>=self.n:
      raise StopIteration
    else:
      result=math.factorial(self.i)
      self.i+=1
      return result
fact_iter=FactIter(5)

equivalent to:

def factorials(n):
  for i in range(n):
    yield math.factorial(i)
fact_iter=factorials(5)

