def counter():
  i = 0
  
  def inc():
    nonlocal i
    i+=1
    return i
  return inc
  
cnt=counter()
cnt() -> 1
cnt() -> 2
cnt() -> 3

class CounterIterator:
  def __init__(self,counter_callable):
    self.counter_callable=counter_callable
    
  def __iter(self):
    return self
    
  def __next__(self):
    return self.counter_callable()

cnt=counter()
cnt_iter=CounterIterator(cnt)
for _ in range(5):
  print(next(cnt_iter))
  
# problem: it is infinite, careful
# solution:

class CounterIterator:
  def __init__(self,counter_callable,sentinel):
    self.counter_callable=counter_callable
    self.sentinel=sentinel
    
  def __iter(self):
    return self
    
  def __next__(self):
    result = self.counter_callable()
    if result == self.sentinel:
      raise StopIteration
    else:
    return result
    
cnt=counter()
cnt_iter=CounterIterator(cnt,5) # stop at 5
for c in cnt_iter:
  print(c) -> 1,2,3,4

# problem: you can continue to call
# continue with code above, if run
next(cnt_iter) ->6

solution:
class CounterIterator:
  def __init__(self,counter_callable,sentinel):
    self.counter_callable=counter_callable
    self.sentinel=sentinel
    self.is_consumed=False
    
  def __iter(self):
    return self
    
  def __next__(self):
    if self.is_consumed:
      raise StopIteration
    else:
      result = self.counter_callable()
      if result == self.sentinel:
        self.is_consumed = True
        raise StopIteration
      else:
        return result
        
*************************************************************************************************************************************
above can be general application:
class CallbaleIterator:
  xxxxxxxxxxxxxxxxxxx
  xxxxxxxxxxxxxxxxxxx

help(iter) -> python built-in sentinel value
*************************************************************************************************************************************
application - countdown

def countdown(start=10):
  def run():
    nonlocal start
    start-=1
    return start
  return run

takeoff=countdown(10):
for _ in range(15):
  print(takeoff()) -> will go to -5
  
  
# stop somewhere
takeoff=countdown(10)
takeoff_iter=iter(takeoff,-1) # stop at 0, need to use -1 here
for num in takeoff_iter:
print(num) -> get to and stop at 0
