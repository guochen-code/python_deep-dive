sort key:
it has to be a function, that is going to be given every item in the iterable that we are trying to sort
and it will return a value, the natural ording on that value is going to determine the ordering of the list
*************************************************************************************************************************************
application:
# ordering based on values rather than keys
d = {'a':100, 'b': 50, 'c': 10}
sorted(d) -> ['a','b','c']
sorted(d,key=lambda k:d[k]) -> ['c','b','a']

t='this', 'parrot','is','a','late','bird'

def sort_key(s):
  return len(s)

sorted(t,key=sort_key)         # by default, reserve = False, it is ascending order
sorted(t,key=lambda s:len(s))

# notice that if equal ordering, the original ordering will be preserved.

*************************************************************************************************************************************
sorted(lst) vs lst.sort()
lst.sort() is in-place sort, which is more efficient 
if lst is sorted once, the next time run lst.sort() will be faster

*************************************************************************************************************************************
ordering of Class

class MyClass:
  def __init__(self,name,val):
    self.name=name
    self.value=value
    
  def __repr__(self):
    return f'MyClass({self.name},{self.val})'
    
  def __gt__(self,other):
    return self.val > other.val
    
****************
Conclusion:
(1) if no __gt__, you can have __lt__, python will infer one from the other
(2) if no __gt__ and no __lt__, sorted([c1,c2,c3,c4]) will get an error
(3) if no __gt__ and no __lt__, but don't want error: sorted([c1,c2,c3,c4],key=lambda c: c.val). this will work.
****************

