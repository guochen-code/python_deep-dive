Boolbean is subclass of int, can be interpreteed as integers 1 and 0
True and False are singleton objects, use either is or == to compare Boolean expression

!!! True and 1 are not the same object: id(True) != id(1)
!!! False and 0 are not the same object: id(False) != id(0)
True is 1 -> False
True == 1 -> True

Booleans as integers can leand to "strange" behavior you may not expect
True + True + True -> 3
(True + True + True) % 2 -> 1
-True -> -1
100*False -> 0

Boolean constructor bool(x) returns Truen when x is True and False when x is False

*** for integers, bool(x) always return True if x is not 0

******************************************************************************
****** Every objecthas a True truth valuem except:
1. None
2. Flase
3. 0 in any numeric type(e.g.0,0.0,0+0j,.....)
4. empty sequences (e.g. list, tuple, string....)
5. empty mapping types (e.g. dictionary, set, ....)
6. custom classes that implement a __bool__ or __len__ method that returns False or 0

example: integers
def __bool__(self):
  return self != 0

when we call bool(100), python actually executes 100.__bool__() and therefore returns the result of 100 != 0 which is True
when we call bool(0), python actually executes 0.__bool__() and therefore returns the result of 0 != 0 which is False

bool([1,2,3]) -> True
bool([]) -> False
bool(None) -> False

example:
if my_list:
  # code block
################# this is equivalent to ####################
if my_list is not None and len(my_list)>0:
  # code block

********************************************************************* boolean operator*********************************************************************************
x or y: return x if x is truthy, else evaluate y and return y !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
application --- return default value:
s1=None
s2=''
s3='abc'
s1=s1 or 'nan'  -> nan
s2=s2 or 'nan' -> nan
s3=s3 or 'nan' -> abc

x and y: if x is falsy, return x, otherwise evaluate and return y !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
a/b on general, but return b if b=0:
if b and a/b --- is equivalent to ----
if b ==0:
  return b
else:
  return a/b
  
application: get string data from database and return first character of the string:
s1=None
s2=''
s3='abc'
solution:
(s1 and s1[0]) or ''
(s2 and s2[0]) or ''
(s3 and s3[0]) or ''




