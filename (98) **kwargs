*args is used to scoop up variable amount of remaining positional arguments - > tuple
the parameter name args is arbitrary - * is the real performer here

**kwargs is used to scoop up a variable amount of remaining keyword arguments - > directionary
the parameter name kwargs is arbitrary- ** is the real performer here

**kwargs can be specified even if the positional arguments have not been exhausted (unlike keyword-only arguments)
no parameters can come after **kwargs

def func(a,b,*,**kwargs):  -----> error, * function = **kwargs function
  # code
  
def func(a,b,*,d,**kwargs): -----> ok
  # code
  
  
********************************** put it together *************************
a, b, c=10    *args/*   kw1, kw2=100    **kwargs

typical use case:
keyword-only arguments are used to modify the default behaviour of a function, such as the print() function in python ************************************

def time_it(fn,*arg,**kwargs):
  fn(arg,kwargs) -----------------> error, need to unpack the arguments
  fn(*args,**kwargs) -------------> * unpack tunple, ** unpack dictionary

