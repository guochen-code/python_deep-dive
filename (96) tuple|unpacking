we can unpack any iterable part
********************************************************************************************************************************************
( ) does not create tuple, "," create tuple

(1) is integer 1
(1,) is tuple

# create empty tuple
a = ()
a =, syntax error

unpacking packed values
a, b, c = [1, 2, 3]
a,b,c = 'XYZ'

simple application of unpacking
swapping values of two variables

"traditional approach"
tmp = a
a = b
b = tmp

using unpacking
a,b = b,a
# this works because in python, the entire RHS is evaluated first and completely, then assignments are made to the LHS.
# memory references to a and b are created first before assignment
# nice side effect of unpacking in python


unpacking Sets and Dictionaries
*** dictionaries and sets are unordered types.
you can iterate but no guarantee the order of the results

*** sets are dictionaries have only keys but no values


The use case for *
l = [1,2,3,4,5,6]

a,b=l[0],l[1:]
a,*b=l

use ** to unpack key-value pair, ** cannot be used on LHS, ** only works for dictionaries.
example:
d1={'p':1,'y':2}
d2={'t':3,'h':4}
d3={'h':5,'o':6,'n':7}
d={**d1,**d2,**d3} -> {'p':1,'y':2, 't':3, 'h':5,'o':6,'n':7} # note the key 'h' is in both d2 and d3
note that the value of 'h' in d3 "overwrite" the first value of 'h' in d2
application example:
default and user configuration setting. the same key, user setting overwrite default setting

example:
d1={'a':1,'b':2}
{'a':10,'c':3,**d1} -> {'a':1, 'b':2, 'c':3}
{**d1,'a':10,'c':3} -> {'a':10, 'b':2, 'c':3}

nested unpacking
a,b,(c,d) = [1,2,[3,4]]
a,*b,(c,d,e)=[1,2,3,'XYZ']

example: !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
a,*b,(c,*d)=[1,2,3,'python'] -> a=1, b=[2,3], c='p', d=['y', 't','h','o','n']

example: !!!!!!!!!!!!!!
s1={1,2,3}
s2={3,4,5}
s1+s2 -> error
{*s1,*s2} -> ok
s1.union(s2) -> ok





