lambda expressions are simply another way to create functions --- anonymous functions

******************************************************************************************
lambda [parameter list]: expression # parameter list is optional # return a function
******************************************************************************************

example:
lambda x : x**2
lambda x,y : x+y
lambda : 'hello' # no parameter
lambda s : s[::-1].upper()

type(lambda x : x**2) -> function

application:
(1) assign a lambda to a variable name
my_func=lambda x : x**2
type(my_func) -> function
my_func(3) ->9

identical to:
def my_func(x):
  return x**2
  
(2) pass as an argument to another function
def apply_func(x,fn):
  return fn(x)
apply_func(3,lambda x:x**2) -> 9

limitations:
- the body of a lambda is limited to a signle expression
- no assignments lambda x:x=5 -> error / lambda x: x=x+5
- no annotations: lambda x:int:x**2
- single logical line of code -> line continuation is ok, but still just one expression
  lambda x: x*\
            math.sin(x)
            
            
f = lambda x, *args, y, **kwargs: (x,*args,y,kwargs)
f(1,'a','b',y=100,a=10,b=20)

******
def (*args,**kwargs,fn): ----> error, fn can't be after **kwargs
def (fn, *args,**kwargs): ---> ok
            
 
************** application: lambda and sorted ******************
l=['c','B','D','a']
sorted(l) -> ['B','D','a','c']
ortd('a') -> 97
ord('A') -> 65
sorted(l,key=lambda s: s.upper()) -> ['a','B','c','D']

another example:
sort according to value of a dictionary, not key:
d = {'abc':200, 'def':300, 'ghi':100}
sorted(d,key=lambda e:d[e]) -> ['ghi','abc','def']
sorted(d) -> ['abc','def', 'ghi']

another exampl:
def dist_sq(x)
  return (x.real)**2+(x.img)**2
l = [3+3j,1-1j,0,3+0j]

sorted(l,key=dist_sq) -> [0,(1-1j),(3+0j),(3+3j)] ***************************
# apply function dist_sq on each element of list l **************************!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

or use lambda:
sorted(l,key=lambda x:(x.real)**2+(x.img)**2)

another example:
************ in python, if equal, return ordering like in the original list *******
l = ['Cleese','Idle','Palin','Chapman','Gilliam','Jones']
# sort by the last letter:
sorted(l,key=lambda s:s[-1]) -> ['Cleese','Idle','Gilliam','Palin','Chapman','Jones'] ###### in python, if equal, return ordering like in the original list, therefore Cleese before Idle


************* randomize an iterable using sorted !!!!
import random

l=[1,2,3,4,5,6,7,8,9,10]

print(sorted(l,key=lambda x:random.random()))

