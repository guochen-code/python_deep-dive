closure means extended scope
func.__closure__
func.__code__.co_freevars

example:
nested closures

def incrementer(n):
  def inner(start):
    current = start
    def inc()"
      nonlocal current
      current+=n
      return current
    return inc
  return inner
  
(inner)
fn = incrementer(2) -> fn.__code__.co_freevars -> 'n' n=2
(inc)
inc_2 = fn(100) -> inc_2.__code__.co_freevars -> 'current', 'n' current =100, n=2
(calls inc)
inc_2() -> 102 (current=102,n=2)
inc_2() -> 104 (current=104,n=2)

********************************************************************************************************************************************************************
shared extended scopes (shared free variable)

def outer():
  count=0
  
  def inc1():
    nonlocal count
    count+=1
    return count
  
  def inc2():
    nonlocal count
    count +=1
    return count
  
  return inc1, inc2
  
f1,f2=outer()
f1() ->1
f2() ->2

************************************************** problem online
def adder(n):
  def inner(x):
    return x+n
  return inner
add_1=adder(1)
add_2=adder(2)
add_3=adder(3)

add_1(10) ->11
add_2(10) ->12
add_2(10) ->13

But suppose we doing it this way: (above is repetitive, as develop, we want to avoid this, so we do below, but not working!)
adders=[]
for n in range(1,4):
  adders.append(lambda x:x+n)
  
n=1: the free variable in the lambda is n, and it is bound to the n we created in the loop
n=2: the free variable in the lambda is n, and it is bound to the (same) n we created in the loop
n=1: the free variable in the lambda is n, and it is bound to the (same) n we created in the loop     # n is global, get none if run adders[0].__closure__, not closure

now we could call the adders in the following way:
adders[0](10) -> 13
adders[1](10) -> 13
adders[2](10) -> 13

# note that: adders->[<function __main__.<lambda>(x)>, <function __main__.<lambda>(x)>, <function __main__.<lambda>(x)>]
# reason:
remember python does not "evaluate" the free variable n until the adders[i] function is called
since all three functions in adders are bound to the same n
by the time we call adders[0], the value of n is 3 (the last iteration of the loop set n to 3)

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
what if in this way: (n still changes over loop) # that is a bug you can every easily introduced to your code !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

def create_adders():
  adders=[]
  for n in range(1,4):
    adders.append(lambda x:x+n)
  return adders
!!!!!!!!!!! now it is a closure !!!!!!!!!!!!!
adders[0].__closure__ -> have sth now!
adders[0](10) -> 13

((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((
solution: 
take action immediately when the function is created

def create_adders():
  adders=[]
  for n in range(1,4):
    adders.append(lambda x, y=n:x+y)
  return adders
why this works:
use a default y = n
default value is evaluated at creation time
so when lambda is created, the default value is used! this time is one
next iteration default value =2
in this case we did not create closure, just create function.
