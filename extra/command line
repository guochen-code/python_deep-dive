**********************************************************
pass arguments into a .py script
**********************************************************

# this is example.py
import sys

keys = sys.argv[1::2] # every 2 steps
values= sys.argvp2::2]

args={k:v for k,v in zip(keys,values)}

first_name = args.get('--first-name',None)
last_name = args.get('--last-name',None)
yob = int(args.get('--yob',None)) # need conversion as original is string

# in the terminal, run: python example.py --first-name John --last-name Cleese --yob 2000

**********************************************************
use library --- argparse
**********************************************************
import argparse

parser=argparse.ArgumentsParser(description='calculates the div a//b and mode a%b of two integers')
parser.add_argument('a',help='first integer',type=int)
parser.add_argument('b',help='second integer',type=int)

args=parser.parse_args()
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
you don't need to pass from terminal, you can pass this way:
args= parser.parse_args(['100','200'])
even if you run in terminal: example.py 10 20, you will still get 100 and 200
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
get help, can run in terminal: example.py -h or --help
you will get help information
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

********************************************************************************************************************
pass named arguments into a .py script
********************************************************************************************************************
import sys
import datetime

parser=argparse.ArgumentParser(description='returns a string containing the name and age of the person.')
parser.add_argument('-f','--first',help='first name',type=str,required=False) 
parser.add_argument('-l','--last',help='last name',type=str,required=True)
parser.add_argument('-y','--yob',help='year of birth',type=str,required=False)

# when you have both short and long name, it will display long name
# short name is user friendly, no need to type in a lot of things
# what if you want display something else, but you don't want user to type in a long command ---- use destination !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

parser=argparse.ArgumentParser(description='returns a string containing the name and age of the person.')
parser.add_argument('-f','--first',help='first name',type=str,required=False,dest='first_name') 
parser.add_argument('-l','--last',help='last name',type=str,required=True,dest='last_name')
parser.add_argument('-y','--yob',help='year of birth',type=str,required=False,dest='birth_year)

args=parser.parse_args()

if args.first_name
  names=[args.first_name]
else:
  names=[]

names.append(args.last_name)
full_name=''.join(names)

current_year=datetime.datetime.utcnow().year
age=current_year-args.birth_year
print(f'{full_nam} is {age} years old')

********************************************************************************************************************
sepcify multiple values for a single argument
********************************************************************************************************************
parser=argparse.ArgumentParser(description='prints the squares of a list of numbers, and the cubes of another list of numbers.')
parser.add_argument('--sq',help='list of numbers to square',type=float, nargs='*')  # default required is False # nargs is variable
parser.add_argument('--cu',help='list of numbers to cube',type=float,required=True,dest='cubes', nargs='+') # + means it needs at least 1 argument

args=parser.parse_args()

if args.sq:
  squares = [n**2 for n in args.sq]

cubes=[n**3 for n in args.cubes]

# in terminal, run: python example.py --cu 1 2 3 4.5 --sq 1 2 3 4

**************************************************************************** flag and other *************************************************************************
paresr.add_argumnet('-q','--quite',action='store_false')
parser.add+argument('-q2',action='store_const',const=False,default=True) # same as above
args=parser.parse_args()

# in terminal, run:
python example.py -> Namespace(q2=True, quiet=True) 
python example.py -q2 -q -> Namespace(q2=False, quiet=False)

paresr.add_argumnet('-q','--quite',action='store_true')
parser.add+argument('-q2',action='store_const',const=True,default=False) # same as shorthand way of doing above

************************************************************************* mutually exclusive arguments *************************************************************
# you can't have both verbose and quiet
import argparse

parser=argparse.ArgumentParser()

group=parser.add_mutually_exclusive_group()
group.add_argument('-v','--verbose',action='store_true')
group.add_argument('-q','--quiet',action='store_true')

parser.add_argument('-n',type=complext,required=True)

args=parser.parse_args()

prit(args)

# in terminal, run: python example.py -n 10+3j -q -v -> error: argument -v/--verbose: not allowed with argument -q/--quiet

application:
import cmath
if args.quiet:
  print('quiet mode...')
  print('nonthing to see here. move along now...')
elif args.verbose:
  print('verbose mode...')
  print(f'input:{arg.n}')
  print(f'real={args.n.real},image={args.n.imag}')
  print(f'{args.n} = {cmath.polar(args.n)}')
else:
  print('normal mode...')





