import modeule1
import module1 # second time here, nothing will happen. because it looked into cache, already there.

# remove module1
del globals()['module1']
module1.function() -> error: name module1 not defined

********************************************************************************
what does import do?
it brings in the code, compiles, and execute and put it in sys.modules
********************************************************************************

from cmath import exp

cmath is in sys.modules -> True
cmath is in globals() -> False
exp is in globals() -> True


cmath=sys.modules['cmath']
cmath is in globals() -> True

********************************************************************************
why not use from <library> import *

example:
from cmath import *
from math import *
# both of them have same symbol names like sqrt. so which one.....

# it is not the * causing the problem. The root cause is the same name

from cmath import sqrt
from math import sqrt # still will overwrite

solution: use aliases
from cmath import c_sqrt
from math import sqrt

*********************************************************** reloading module ***********************************************************
(1) 
del module
import module
# different id for the reimported module
# problem with this approach: only change in global()?. No change to other module import this module!!!!!!!! they still point to the old memory address

(2) use importlib
import importlib
importlib.reload(module) # module needs to be in global() # if not, we can use importlib.reload(sys.modules['module'])
# will keep the same memory address !!!!!!!! but the content has been changed to reflect the change in the module

(3) problem for above (2) approach
# if call func(), still use the old module
# because func() in namespace is still referred to the old (precondition: from module import func, executed before)
# so need to do something:
from module import func() again, so change in the namesapce, then run
func() -> new results
or func=sys.modules['module'].func then you can call func() -> new result





