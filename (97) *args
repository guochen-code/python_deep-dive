def func1(a,b,c)"
  # code

l = [10,20,30]

this will not work func1(l)

but we can unpack the list first and then pass it to the function
func1(*l) -> a=10, b=20, c=30

how boolean and work: !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
def avg(*args):
  count=len(args)
  total=sum(args)
  return count and total/count *********************************

def avg(*args):
  count=len(args)
  total=sum(args)
  if count == 0:
    return 0
  else:
    return total/count

************************************************************************************************************************************************************************
func1(a,b,*arg,d): ############### *arg is optional
  print(a,b,arg,d) -> ok

func1(1,2,3,4,5) -> error
func1(1,2,3,4,d=5) -> ok

if you want no positional arguments
example:
def func1(*,a): ################ * means the end of positional argument. after that, everything is keyword argument.
  # code
  
func1(1,2,a=3) -> error, no positional arguments allowed
func1(a=3) -> ok

if want 2 positional arguments:
def func1(a,b,*,c):
  # code


