modify the behaviour of the dot operator
p.x

instead of dot operator looking into dictionary, it's going to say this is a descriptor
object implemented a descriptor protocol, need to do sth different

 
class IntegerField:
  def __set_name__(self,owner,name):
    self.name=name
  
  def __get__(self,instance,owner):
    print('__get__ called...')
    return instance.__dict__.get(self.name, None)
    
  def __set__(self, instance, value):
    print('__set__ called...')
    if not isinstance(value,int):
      raise TypeError('Must be an integer')
    instance.__dict__[self,name]=name
    
class Point:
  x=IntegerField()
  y=IntegerField()
  
  def __init__(self,x,y):
    self.x=x
    self.y=y
    
p=Point(10,2) # acually run the __set__ method
p.x, p.y # actually run the __get__ method

p.x = 10.5
---> TypeError: Must be an integer

# without changing the interface of our class, we replaced the default functionality of the dot operator with another piece of code
# if I want to change, no need to modify the Point class at all, just need to modify the descriptor
