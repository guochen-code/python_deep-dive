import enum

class State(enum.Enum):
  WAITING=enum.auto()
  STARTED=enum.auto()
  FINISHED=enum.auto()

for member in State:
  print(member.name,member.value)
->
WAITING 1
STARTED 2
FINISHED 3

# careful - do not mix
class State(enum.Enum):
  WAITING=100
  STARTED=enum.auto()
  FINISHED=enum.auto()
list(State) -> [<State.WAITING: 100>, <State.STARTED: 101>, <State.FINISHED: 102>]

class State(enum.Enum):
  WAITING=enum.auto()
  STARTED=1
  FINISHED=enum.auto()
list(State) -> [<State.WAITING: 1>, <State.FINISHED: 2>]
# let's look at this:
State.__members__
-> mappingproxy({'WAITING': <State.WAITING: 1>,
                  'STARTED': <State.WAITING: 1>,
                  'FINISHED': <State.FINISHED: 2>})
                  
# what happened really
hasattr(State, '_generate_next_value_') -> True
# when auto gets called, it actually looks for this function in class and runs it
# example: what to do if you want your random numbers to be unique (no repeated values)

import random
random.seed(0)
class State(enum.Enum):
  def _generate_next_value_(name,start,count,last_values):
    while True:
      new_value=random.randint(1,100)
      if new_value not in last_values:
        return new_value
  a=enum.auto()
  b=enum.auto()
  c=enum.auto()
  d=enum.auto()
for member in State:
  print(member.name, member.value)
  
******
class State(enum.Enum):
  def _generate_next_value_(name,start,count,last_values):
    return name.title()
    
  WAITING=enum.auto()
  STARTED=enum.auto()
  FINISHED=enum.auto()
for member in State:
  print(member.name, member.value)
->
WAITING Waiting
STARTED Started
FINISHED Finished

*** how to make it reusable
class NameAsString(enum.Enum):
  def _generate_next_value_(name,start,count,last_values):
    return name.lower()
    
class Enum1(NameAsString):
  A=enum.auto()
  B-enum.auto()
list(Enum1) -> [<Enum1.A: 'a', <Enum1.B: 'b'>]
****************************************************************8
what if we do not want user to use lookup by value

class State(enum.Enum):
  WAITING=1
  STARTED=2
  FINISHED=3
# later we may want to add:
class State(enum.Enum):
  WAITING=1
  STARTED=2
  RUNNINGPENDING=3
  FINISHED=4
# solution  
class State(enum.Enum):
'''please do not use member values. These are meaningless and subject to change'''
  WAITING=object()
  STARTED=object()
  RUNNINGPENDING=object()
  FINISHED=object()
State.WAITING, State['FINISHED']
-> (<State.WAITING: <object object at 0x7fa....>>,<State.FINISHED: <object object at 0x7fa108...>>)
***************************************************************
make second element aliase to the first one - count - _generate_next_value

class Aliased(enum.Enum):
  def _generate_next_value_(name,start,count,last_values):
    print(f'count={count}')
    if count%2==1:
      #make this member an alias of the previous one
      return last_values[-1]
    else:
      return last_values[-1]+1
      
GERREN=1
GREEN_ALIAS=1
RED=10
CRIMSON=enum.auto()
BLUE=enum.auto()
AQUA=enum.auto()
 
