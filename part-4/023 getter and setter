# property
class Logger:
  @property
  def current_time(self):
    return datetime.utcnow().isoformat()

logger.current_time # access from class
-> <property at 0x7ff93841e9f8>

l=Logger()
l.current_time # access from instance
-> '2019-07-05T15:44:54.500008'

# descriptor
class TimeUTC:
  def __get__(self, instance, owner_class):
    if instance is None:
      return self
    else:
      return datetime.utcnow().isoformat()
      
class Logger:
  current_time = TimeUTC()
  
Logger.current_time # access from class
-> <__main__.TimeUTC at 0x7ff928726470>

l=Logger()
l.current_time # access from instance
-> '2019-07-05T15:44:54.500008'

**************************************************************************************************
class TimeUTC:
  def __get__(self,instance,owner_class):
    print(f'__get__ called, self = {self}, instance = {instance}, owner_class={owner_class}')
    return datetime.utcnow().isoformat()
    
class Logger1:
  current_time = TimeUTC()
  
class Logger2:
  current_time = TimeUTC()
  
Logger.current_time # access from class
-> __get__ called, self=<__main__.TimeUTC object at 0x7ff9287261d0>, instance=None, owner_class=<class '__main__.Logger1'>

they are class level attributes that are instances of some other class that implements the __get__ method
so an instance of a descriptor object

l1=Logger1()
print(hex(id(l1))) -> 0x7ff9287264e0
l1.current_time
-> __get__ called, self=<__main__.TimeUTC object at 0x7ff9287261d0>, instance =<__main__.Logger1 object at 0x7ff9287264e0>, 
owner_class=<class '__main__.Logger'> # __main__.TimeUTC object at 0x7ff9287261d0> will remain the same for Logger2, see below subtle point

--- that's the main difference. when we call the descriptor, when we call the get on the descriptor from the class,
the instance will come back as none, 
when we call from instance, instance will be populated with whatever instance it was called from
--- that means we can differentiate inside our __get__ method, whether the descriptor was accessed via the class or an instance of the class
when the descriptor is accessed from the class, we want to return the descriptor instance itself because 
that allows us to have a handle to that descriptor instance, we wouldnot be able to otherwise or at least not easily

example:
class TimeUTC:
  def __get__(self, instance, owner_class):
    if instance is None:
      return self
    else:
      return datetime.utcnow().isoformat()
      
class Logger:
  current_time = TimeUTC()
  
Logger.current_time # access from class
-> <__main__.TimeUTC at 0x7ff928726470>

l=Logger()
l.current_time # access from instance
-> '2019-07-05T15:44:54.500008'

**************************************************************************************************************
there is a subtle point that we have to understand when we create multiple instances of a class that uses a descriptor as a class attribute
since the descriptor is assigned to a class attribute al instances of the class will share the same descriptor instance
that is always going to be true because the descriptor instance is a class attribute
important to undestand otherwise will run into issues

example:

class TimeUTC:
  def __get__(self, instance, owner_class):
    if instance is None:
      return self
    else:
    print(f'__get__ called in {self}')
      return datetime.utcnow().isoformat()

l1=Logger()
l2=Logger()
l1.current_time, l2.current_time
->
__get__ called in <__main__.TimeUTC object at 0x7ff938e0b70>
__get__ called in <__main__.TimeUTC object at 0x7ff938e0b70>
('2019-07-05T15:46:57.197518','2019-07-05T15:46:57.197558')

in this example doesnot matter, but
what happens if our property relies on some kind of state in the descriptor

class Countdown:
  def __init__(self,start):
    self.start=start+1
    
  def __get__(self,instance,owner):
    if instance is None: # not use: if not instance, totally different things
      return self
    self.start-=1
    return self.start
    
class Rocket:
  countdown = Countdown(10)

rocket1=Rocket()
rocket2=Rocket()

rocket1.countdown -> 10
rocket2.countdown -> 9 # problem!!!!!!!
rocket1.countdown -> 8

!!!!!!! the current countdown value is ahred by both the rocket 1 and rocket 2 instance !!!! can be useful in some cases.
we have to be careful how we deal with instance level state

**************************************************************************************************************
__setter__




