class Color(Enum):
  red = 1
  crimson = 1
  carmine = 1
  blue = 2
  aquamarine = 2
# does it work?
# suprise, it did work, because of aliases
-> in fact our enumeration contains only two members:
  -> Color.red
  -> Color.blue
the remaining "members" point to these two members:
Color.crimson -> Color.red

lookups with aliases will always return the "master" member
Color(1) -> Color.red
Color['crimson']->Color.red

containment
Color.crimson in Color -> True

Iterating Aliases
list(Color) -> Color.red, Color.blue

the only way to see the aliases is to use __members__
Color.__members__
-> mappingproxy
{'red':<Color.red:1>,
'crimson':<Color.red:1>
'carmine':<Color.red:1>,
'blue':<Color.blue:2>,
'aquamarine': <color.blue:2>}
# the keys are different, but they point to the same member

Ensuring Unique Values
-> way may want to gurantee that our enumerations do not contain aliases (unique values)
-> we could just be careful writting our code!
-> or use the @enum.uunique decorator
@enum.unique
class Color(Enum):
  red=1
  crimson=1
  carmine=1
  blue=2
  aquamarine=2
-> ValueError: duplicate values found (when class is complied)



