interning: reusing objects on-demand

at startup (when your program starts running.In the case of something like Jupyter, that's when the kernel for the notebook starts up.), 
python(cpython), pre-loads (caches) a global list of integers in the range [-5,256]
any time an integer is referenced in that range, python will use the cached version of that object

optimization strategy - small integers show up often

example:
when we write a = 10, python just has to point to the existing reference for 10
when we write a = 257, python does not use that global list and a new object is created every time

check which python you use:
import platform
print(platform.python_implementation())

I get CPython, but other possible values might be PyPy, IronPython, Jython, etc.

****** [-5,256] they are singleton collection.

string interning
why:
it's all about (speed and possibly memory) optimization

python, both internally, and in the code you writem deals with lots and lots of dictionary type lookups, on string keys, which means a lot f string equality testing.
example:
a='some_long_string'
b='some_long_string'
using a == bm we need to compare the two strings character by character.
but if we know that 'some_long_string' has been interned, then a and b are the same string if they both point to the same memory address.
in which we can use a is b instead - which compares two integers (many address).
this is much faster than the character by character comparison

****** Not all strings are automatically interned by python.
But you can force strings to be interned by using the sys.intern() method. Basically make this string a singleton.

don't use until you need to
when should you do this:
- dealing with a large number of strings that could have high repetition e.g. tokenizing a large corpus of text (NLP)
- lots of string comparisons
