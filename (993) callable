************************************************************************************************************************************************
any object that can be called using the () operator

callables always return a value

to see if an object is callable, we can use the built-in function: callable
************************************************************************************************************************************************
example:
callable(print) -> True
callable('abc'.upper)-> True # string
callable(str.upper)->True # class
callable(callable) -> True

example:
# make instances callable:
class MyClass:
  def __init__(self,x=0):
    print('initializing...')
    self.counter=x
  def __call__(self,x=1): ************************************************************************
    print('updating counter...')
    self.counter+=x

b=MyClass()
callable(b) -> True # if no __call__ defined, will return False
